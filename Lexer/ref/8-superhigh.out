1: RESERVED_WORD void
2: ID func
3: SPECIAL_SYMBOL (
3: SPECIAL_SYMBOL )
4: SPECIAL_SYMBOL {
5: RESERVED_WORD int
5: ID i
5: SPECIAL_SYMBOL ;
6: ID for
6: SPECIAL_SYMBOL (
6: ID i
6: SPECIAL_SYMBOL =
6: NUM 0
6: SPECIAL_SYMBOL ;
6: ID i
6: SPECIAL_SYMBOL < 
6: NUM 10
6: SPECIAL_SYMBOL ;
6: ID i
6: SPECIAL_SYMBOL +
6: SPECIAL_SYMBOL +
6: SPECIAL_SYMBOL )
7: SPECIAL_SYMBOL {
8: RESERVED_WORD if
8: SPECIAL_SYMBOL (
8: ID i
8: SPECIAL_SYMBOL ==
8: NUM 5
8: SPECIAL_SYMBOL )
9: SPECIAL_SYMBOL {
10: ID continue
10: SPECIAL_SYMBOL ;
11: SPECIAL_SYMBOL }
12: RESERVED_WORD else
13: SPECIAL_SYMBOL {
14: ID printf
14: SPECIAL_SYMBOL ;
15: SPECIAL_SYMBOL }
16: SPECIAL_SYMBOL }
17: SPECIAL_SYMBOL }
20: RESERVED_WORD int
21: ID main
22: SPECIAL_SYMBOL (
22: SPECIAL_SYMBOL )
23: SPECIAL_SYMBOL {
24: ID func
24: SPECIAL_SYMBOL (
24: SPECIAL_SYMBOL )
24: SPECIAL_SYMBOL ;
25: RESERVED_WORD return
25: NUM 0
25: SPECIAL_SYMBOL ;
26: SPECIAL_SYMBOL }
46: RESERVED_WORD void
47: ID func
48: SPECIAL_SYMBOL (
48: SPECIAL_SYMBOL )
49: SPECIAL_SYMBOL {
50: RESERVED_WORD int
50: ID i
50: SPECIAL_SYMBOL ;
51: ID for
51: SPECIAL_SYMBOL (
51: ID i
51: SPECIAL_SYMBOL =
51: NUM 0
51: SPECIAL_SYMBOL ;
51: ID i
51: SPECIAL_SYMBOL < 
51: NUM 10
51: SPECIAL_SYMBOL ;
51: ID i
51: SPECIAL_SYMBOL +
51: SPECIAL_SYMBOL +
51: SPECIAL_SYMBOL )
52: SPECIAL_SYMBOL {
53: RESERVED_WORD if
53: SPECIAL_SYMBOL (
53: ID i
53: SPECIAL_SYMBOL ==
53: NUM 5
53: SPECIAL_SYMBOL )
54: SPECIAL_SYMBOL {
55: ID continue
55: SPECIAL_SYMBOL ;
56: SPECIAL_SYMBOL }
57: RESERVED_WORD else
58: SPECIAL_SYMBOL {
59: ID printf
59: SPECIAL_SYMBOL ;
60: SPECIAL_SYMBOL }
61: SPECIAL_SYMBOL }
62: SPECIAL_SYMBOL }
65: RESERVED_WORD int
66: ID main
67: SPECIAL_SYMBOL (
67: SPECIAL_SYMBOL )
68: SPECIAL_SYMBOL {
69: ID func
69: SPECIAL_SYMBOL (
69: SPECIAL_SYMBOL )
69: SPECIAL_SYMBOL ;
70: RESERVED_WORD return
70: NUM 0
70: SPECIAL_SYMBOL ;
71: SPECIAL_SYMBOL }
92: RESERVED_WORD void
93: ID func
94: SPECIAL_SYMBOL (
94: SPECIAL_SYMBOL )
95: SPECIAL_SYMBOL {
96: RESERVED_WORD int
96: ID i
96: SPECIAL_SYMBOL ;
97: ID for
97: SPECIAL_SYMBOL (
97: ID i
97: SPECIAL_SYMBOL =
97: NUM 0
97: SPECIAL_SYMBOL ;
97: ID i
97: SPECIAL_SYMBOL < 
97: NUM 10
97: SPECIAL_SYMBOL ;
97: ID i
97: SPECIAL_SYMBOL +
97: SPECIAL_SYMBOL +
97: SPECIAL_SYMBOL )
98: SPECIAL_SYMBOL {
99: RESERVED_WORD if
99: SPECIAL_SYMBOL (
99: ID i
99: SPECIAL_SYMBOL ==
99: NUM 5
99: SPECIAL_SYMBOL )
100: SPECIAL_SYMBOL {
101: ID continue
101: SPECIAL_SYMBOL ;
102: SPECIAL_SYMBOL }
103: RESERVED_WORD else
104: SPECIAL_SYMBOL {
105: ID printf
105: SPECIAL_SYMBOL ;
106: SPECIAL_SYMBOL }
107: SPECIAL_SYMBOL }
108: SPECIAL_SYMBOL }
111: RESERVED_WORD int
112: ID main
113: SPECIAL_SYMBOL (
113: SPECIAL_SYMBOL )
114: SPECIAL_SYMBOL {
115: ID func
115: SPECIAL_SYMBOL (
115: SPECIAL_SYMBOL )
115: SPECIAL_SYMBOL ;
116: RESERVED_WORD return
116: NUM 0
116: SPECIAL_SYMBOL ;
117: SPECIAL_SYMBOL }
138: RESERVED_WORD void
139: ID func
140: SPECIAL_SYMBOL (
140: SPECIAL_SYMBOL )
141: SPECIAL_SYMBOL {
142: RESERVED_WORD int
142: ID i
142: SPECIAL_SYMBOL ;
143: ID for
143: SPECIAL_SYMBOL (
143: ID i
143: SPECIAL_SYMBOL =
143: NUM 0
143: SPECIAL_SYMBOL ;
143: ID i
143: SPECIAL_SYMBOL < 
143: NUM 10
143: SPECIAL_SYMBOL ;
143: ID i
143: SPECIAL_SYMBOL +
143: SPECIAL_SYMBOL +
143: SPECIAL_SYMBOL )
144: SPECIAL_SYMBOL {
145: RESERVED_WORD if
145: SPECIAL_SYMBOL (
145: ID i
145: SPECIAL_SYMBOL ==
145: NUM 5
145: SPECIAL_SYMBOL )
146: SPECIAL_SYMBOL {
147: ID continue
147: SPECIAL_SYMBOL ;
148: SPECIAL_SYMBOL }
149: RESERVED_WORD else
150: SPECIAL_SYMBOL {
151: ID printf
151: SPECIAL_SYMBOL ;
152: SPECIAL_SYMBOL }
153: SPECIAL_SYMBOL }
154: SPECIAL_SYMBOL }
157: RESERVED_WORD int
158: ID main
159: SPECIAL_SYMBOL (
159: SPECIAL_SYMBOL )
160: SPECIAL_SYMBOL {
161: ID func
161: SPECIAL_SYMBOL (
161: SPECIAL_SYMBOL )
161: SPECIAL_SYMBOL ;
162: RESERVED_WORD return
162: NUM 0
162: SPECIAL_SYMBOL ;
163: SPECIAL_SYMBOL }
184: RESERVED_WORD void
185: ID func
186: SPECIAL_SYMBOL (
186: SPECIAL_SYMBOL )
187: SPECIAL_SYMBOL {
188: RESERVED_WORD int
188: ID i
188: SPECIAL_SYMBOL ;
189: ID for
189: SPECIAL_SYMBOL (
189: ID i
189: SPECIAL_SYMBOL =
189: NUM 0
189: SPECIAL_SYMBOL ;
189: ID i
189: SPECIAL_SYMBOL < 
189: NUM 10
189: SPECIAL_SYMBOL ;
189: ID i
189: SPECIAL_SYMBOL +
189: SPECIAL_SYMBOL +
189: SPECIAL_SYMBOL )
190: SPECIAL_SYMBOL {
191: RESERVED_WORD if
191: SPECIAL_SYMBOL (
191: ID i
191: SPECIAL_SYMBOL ==
191: NUM 5
191: SPECIAL_SYMBOL )
192: SPECIAL_SYMBOL {
193: ID continue
193: SPECIAL_SYMBOL ;
194: SPECIAL_SYMBOL }
195: RESERVED_WORD else
196: SPECIAL_SYMBOL {
197: ID printf
197: SPECIAL_SYMBOL ;
198: SPECIAL_SYMBOL }
199: SPECIAL_SYMBOL }
200: SPECIAL_SYMBOL }
203: RESERVED_WORD int
204: ID main
205: SPECIAL_SYMBOL (
205: SPECIAL_SYMBOL )
206: SPECIAL_SYMBOL {
207: ID func
207: SPECIAL_SYMBOL (
207: SPECIAL_SYMBOL )
207: SPECIAL_SYMBOL ;
208: RESERVED_WORD return
208: NUM 0
208: SPECIAL_SYMBOL ;
209: SPECIAL_SYMBOL }
230: RESERVED_WORD void
231: ID func
232: SPECIAL_SYMBOL (
232: SPECIAL_SYMBOL )
233: SPECIAL_SYMBOL {
234: RESERVED_WORD int
234: ID i
234: SPECIAL_SYMBOL ;
235: ID for
235: SPECIAL_SYMBOL (
235: ID i
235: SPECIAL_SYMBOL =
235: NUM 0
235: SPECIAL_SYMBOL ;
235: ID i
235: SPECIAL_SYMBOL < 
235: NUM 10
235: SPECIAL_SYMBOL ;
235: ID i
235: SPECIAL_SYMBOL +
235: SPECIAL_SYMBOL +
235: SPECIAL_SYMBOL )
236: SPECIAL_SYMBOL {
237: RESERVED_WORD if
237: SPECIAL_SYMBOL (
237: ID i
237: SPECIAL_SYMBOL ==
237: NUM 5
237: SPECIAL_SYMBOL )
238: SPECIAL_SYMBOL {
239: ID continue
239: SPECIAL_SYMBOL ;
240: SPECIAL_SYMBOL }
241: RESERVED_WORD else
242: SPECIAL_SYMBOL {
243: ID printf
243: SPECIAL_SYMBOL ;
244: SPECIAL_SYMBOL }
245: SPECIAL_SYMBOL }
246: SPECIAL_SYMBOL }
249: RESERVED_WORD int
250: ID main
251: SPECIAL_SYMBOL (
251: SPECIAL_SYMBOL )
252: SPECIAL_SYMBOL {
253: ID func
253: SPECIAL_SYMBOL (
253: SPECIAL_SYMBOL )
253: SPECIAL_SYMBOL ;
254: RESERVED_WORD return
254: NUM 0
254: SPECIAL_SYMBOL ;
255: SPECIAL_SYMBOL }
276: RESERVED_WORD void
277: ID func
278: SPECIAL_SYMBOL (
278: SPECIAL_SYMBOL )
279: SPECIAL_SYMBOL {
280: RESERVED_WORD int
280: ID i
280: SPECIAL_SYMBOL ;
281: ID for
281: SPECIAL_SYMBOL (
281: ID i
281: SPECIAL_SYMBOL =
281: NUM 0
281: SPECIAL_SYMBOL ;
281: ID i
281: SPECIAL_SYMBOL < 
281: NUM 10
281: SPECIAL_SYMBOL ;
281: ID i
281: SPECIAL_SYMBOL +
281: SPECIAL_SYMBOL +
281: SPECIAL_SYMBOL )
282: SPECIAL_SYMBOL {
283: RESERVED_WORD if
283: SPECIAL_SYMBOL (
283: ID i
283: SPECIAL_SYMBOL ==
283: NUM 5
283: SPECIAL_SYMBOL )
284: SPECIAL_SYMBOL {
285: ID continue
285: SPECIAL_SYMBOL ;
286: SPECIAL_SYMBOL }
287: RESERVED_WORD else
288: SPECIAL_SYMBOL {
289: ID printf
289: SPECIAL_SYMBOL ;
290: SPECIAL_SYMBOL }
291: SPECIAL_SYMBOL }
292: SPECIAL_SYMBOL }
295: RESERVED_WORD int
296: ID main
297: SPECIAL_SYMBOL (
297: SPECIAL_SYMBOL )
298: SPECIAL_SYMBOL {
299: ID func
299: SPECIAL_SYMBOL (
299: SPECIAL_SYMBOL )
299: SPECIAL_SYMBOL ;
300: RESERVED_WORD return
300: NUM 0
300: SPECIAL_SYMBOL ;
301: SPECIAL_SYMBOL }
322: RESERVED_WORD void
323: ID func
324: SPECIAL_SYMBOL (
324: SPECIAL_SYMBOL )
325: SPECIAL_SYMBOL {
326: RESERVED_WORD int
326: ID i
326: SPECIAL_SYMBOL ;
327: ID for
327: SPECIAL_SYMBOL (
327: ID i
327: SPECIAL_SYMBOL =
327: NUM 0
327: SPECIAL_SYMBOL ;
327: ID i
327: SPECIAL_SYMBOL < 
327: NUM 10
327: SPECIAL_SYMBOL ;
327: ID i
327: SPECIAL_SYMBOL +
327: SPECIAL_SYMBOL +
327: SPECIAL_SYMBOL )
328: SPECIAL_SYMBOL {
329: RESERVED_WORD if
329: SPECIAL_SYMBOL (
329: ID i
329: SPECIAL_SYMBOL ==
329: NUM 5
329: SPECIAL_SYMBOL )
330: SPECIAL_SYMBOL {
331: ID continue
331: SPECIAL_SYMBOL ;
332: SPECIAL_SYMBOL }
333: RESERVED_WORD else
334: SPECIAL_SYMBOL {
335: ID printf
335: SPECIAL_SYMBOL ;
336: SPECIAL_SYMBOL }
337: SPECIAL_SYMBOL }
338: SPECIAL_SYMBOL }
341: RESERVED_WORD int
342: ID main
343: SPECIAL_SYMBOL (
343: SPECIAL_SYMBOL )
344: SPECIAL_SYMBOL {
345: ID func
345: SPECIAL_SYMBOL (
345: SPECIAL_SYMBOL )
345: SPECIAL_SYMBOL ;
346: RESERVED_WORD return
346: NUM 0
346: SPECIAL_SYMBOL ;
347: SPECIAL_SYMBOL }
368: RESERVED_WORD void
369: ID func
370: SPECIAL_SYMBOL (
370: SPECIAL_SYMBOL )
371: SPECIAL_SYMBOL {
372: RESERVED_WORD int
372: ID i
372: SPECIAL_SYMBOL ;
373: ID for
373: SPECIAL_SYMBOL (
373: ID i
373: SPECIAL_SYMBOL =
373: NUM 0
373: SPECIAL_SYMBOL ;
373: ID i
373: SPECIAL_SYMBOL < 
373: NUM 10
373: SPECIAL_SYMBOL ;
373: ID i
373: SPECIAL_SYMBOL +
373: SPECIAL_SYMBOL +
373: SPECIAL_SYMBOL )
374: SPECIAL_SYMBOL {
375: RESERVED_WORD if
375: SPECIAL_SYMBOL (
375: ID i
375: SPECIAL_SYMBOL ==
375: NUM 5
375: SPECIAL_SYMBOL )
376: SPECIAL_SYMBOL {
377: ID continue
377: SPECIAL_SYMBOL ;
378: SPECIAL_SYMBOL }
379: RESERVED_WORD else
380: SPECIAL_SYMBOL {
381: ID printf
381: SPECIAL_SYMBOL ;
382: SPECIAL_SYMBOL }
383: SPECIAL_SYMBOL }
384: SPECIAL_SYMBOL }
387: RESERVED_WORD int
388: ID main
389: SPECIAL_SYMBOL (
389: SPECIAL_SYMBOL )
390: SPECIAL_SYMBOL {
391: ID func
391: SPECIAL_SYMBOL (
391: SPECIAL_SYMBOL )
391: SPECIAL_SYMBOL ;
392: RESERVED_WORD return
392: NUM 0
392: SPECIAL_SYMBOL ;
393: SPECIAL_SYMBOL }
414: RESERVED_WORD void
415: ID func
416: SPECIAL_SYMBOL (
416: SPECIAL_SYMBOL )
417: SPECIAL_SYMBOL {
418: RESERVED_WORD int
418: ID i
418: SPECIAL_SYMBOL ;
419: ID for
419: SPECIAL_SYMBOL (
419: ID i
419: SPECIAL_SYMBOL =
419: NUM 0
419: SPECIAL_SYMBOL ;
419: ID i
419: SPECIAL_SYMBOL < 
419: NUM 10
419: SPECIAL_SYMBOL ;
419: ID i
419: SPECIAL_SYMBOL +
419: SPECIAL_SYMBOL +
419: SPECIAL_SYMBOL )
420: SPECIAL_SYMBOL {
421: RESERVED_WORD if
421: SPECIAL_SYMBOL (
421: ID i
421: SPECIAL_SYMBOL ==
421: NUM 5
421: SPECIAL_SYMBOL )
422: SPECIAL_SYMBOL {
423: ID continue
423: SPECIAL_SYMBOL ;
424: SPECIAL_SYMBOL }
425: RESERVED_WORD else
426: SPECIAL_SYMBOL {
427: ID printf
427: SPECIAL_SYMBOL ;
428: SPECIAL_SYMBOL }
429: SPECIAL_SYMBOL }
430: SPECIAL_SYMBOL }
433: RESERVED_WORD int
434: ID main
435: SPECIAL_SYMBOL (
435: SPECIAL_SYMBOL )
436: SPECIAL_SYMBOL {
437: ID func
437: SPECIAL_SYMBOL (
437: SPECIAL_SYMBOL )
437: SPECIAL_SYMBOL ;
438: RESERVED_WORD return
438: NUM 0
438: SPECIAL_SYMBOL ;
439: SPECIAL_SYMBOL }
460: RESERVED_WORD void
461: ID func
462: SPECIAL_SYMBOL (
462: SPECIAL_SYMBOL )
463: SPECIAL_SYMBOL {
464: RESERVED_WORD int
464: ID i
464: SPECIAL_SYMBOL ;
465: ID for
465: SPECIAL_SYMBOL (
465: ID i
465: SPECIAL_SYMBOL =
465: NUM 0
465: SPECIAL_SYMBOL ;
465: ID i
465: SPECIAL_SYMBOL < 
465: NUM 10
465: SPECIAL_SYMBOL ;
465: ID i
465: SPECIAL_SYMBOL +
465: SPECIAL_SYMBOL +
465: SPECIAL_SYMBOL )
466: SPECIAL_SYMBOL {
467: RESERVED_WORD if
467: SPECIAL_SYMBOL (
467: ID i
467: SPECIAL_SYMBOL ==
467: NUM 5
467: SPECIAL_SYMBOL )
468: SPECIAL_SYMBOL {
469: ID continue
469: SPECIAL_SYMBOL ;
470: SPECIAL_SYMBOL }
471: RESERVED_WORD else
472: SPECIAL_SYMBOL {
473: ID printf
473: SPECIAL_SYMBOL ;
474: SPECIAL_SYMBOL }
475: SPECIAL_SYMBOL }
476: SPECIAL_SYMBOL }
479: RESERVED_WORD int
480: ID main
481: SPECIAL_SYMBOL (
481: SPECIAL_SYMBOL )
482: SPECIAL_SYMBOL {
483: ID func
483: SPECIAL_SYMBOL (
483: SPECIAL_SYMBOL )
483: SPECIAL_SYMBOL ;
484: RESERVED_WORD return
484: NUM 0
484: SPECIAL_SYMBOL ;
485: SPECIAL_SYMBOL }
506: RESERVED_WORD void
507: ID func
508: SPECIAL_SYMBOL (
508: SPECIAL_SYMBOL )
509: SPECIAL_SYMBOL {
510: RESERVED_WORD int
510: ID i
510: SPECIAL_SYMBOL ;
511: ID for
511: SPECIAL_SYMBOL (
511: ID i
511: SPECIAL_SYMBOL =
511: NUM 0
511: SPECIAL_SYMBOL ;
511: ID i
511: SPECIAL_SYMBOL < 
511: NUM 10
511: SPECIAL_SYMBOL ;
511: ID i
511: SPECIAL_SYMBOL +
511: SPECIAL_SYMBOL +
511: SPECIAL_SYMBOL )
512: SPECIAL_SYMBOL {
513: RESERVED_WORD if
513: SPECIAL_SYMBOL (
513: ID i
513: SPECIAL_SYMBOL ==
513: NUM 5
513: SPECIAL_SYMBOL )
514: SPECIAL_SYMBOL {
515: ID continue
515: SPECIAL_SYMBOL ;
516: SPECIAL_SYMBOL }
517: RESERVED_WORD else
518: SPECIAL_SYMBOL {
519: ID printf
519: SPECIAL_SYMBOL ;
520: SPECIAL_SYMBOL }
521: SPECIAL_SYMBOL }
522: SPECIAL_SYMBOL }
525: RESERVED_WORD int
526: ID main
527: SPECIAL_SYMBOL (
527: SPECIAL_SYMBOL )
528: SPECIAL_SYMBOL {
529: ID func
529: SPECIAL_SYMBOL (
529: SPECIAL_SYMBOL )
529: SPECIAL_SYMBOL ;
530: RESERVED_WORD return
530: NUM 0
530: SPECIAL_SYMBOL ;
531: SPECIAL_SYMBOL }
552: RESERVED_WORD void
553: ID func
554: SPECIAL_SYMBOL (
554: SPECIAL_SYMBOL )
555: SPECIAL_SYMBOL {
556: RESERVED_WORD int
556: ID i
556: SPECIAL_SYMBOL ;
557: ID for
557: SPECIAL_SYMBOL (
557: ID i
557: SPECIAL_SYMBOL =
557: NUM 0
557: SPECIAL_SYMBOL ;
557: ID i
557: SPECIAL_SYMBOL < 
557: NUM 10
557: SPECIAL_SYMBOL ;
557: ID i
557: SPECIAL_SYMBOL +
557: SPECIAL_SYMBOL +
557: SPECIAL_SYMBOL )
558: SPECIAL_SYMBOL {
559: RESERVED_WORD if
559: SPECIAL_SYMBOL (
559: ID i
559: SPECIAL_SYMBOL ==
559: NUM 5
559: SPECIAL_SYMBOL )
560: SPECIAL_SYMBOL {
561: ID continue
561: SPECIAL_SYMBOL ;
562: SPECIAL_SYMBOL }
563: RESERVED_WORD else
564: SPECIAL_SYMBOL {
565: ID printf
565: SPECIAL_SYMBOL ;
566: SPECIAL_SYMBOL }
567: SPECIAL_SYMBOL }
568: SPECIAL_SYMBOL }
571: RESERVED_WORD int
572: ID main
573: SPECIAL_SYMBOL (
573: SPECIAL_SYMBOL )
574: SPECIAL_SYMBOL {
575: ID func
575: SPECIAL_SYMBOL (
575: SPECIAL_SYMBOL )
575: SPECIAL_SYMBOL ;
576: RESERVED_WORD return
576: NUM 0
576: SPECIAL_SYMBOL ;
577: SPECIAL_SYMBOL }
598: RESERVED_WORD void
599: ID func
600: SPECIAL_SYMBOL (
600: SPECIAL_SYMBOL )
601: SPECIAL_SYMBOL {
602: RESERVED_WORD int
602: ID i
602: SPECIAL_SYMBOL ;
603: ID for
603: SPECIAL_SYMBOL (
603: ID i
603: SPECIAL_SYMBOL =
603: NUM 0
603: SPECIAL_SYMBOL ;
603: ID i
603: SPECIAL_SYMBOL < 
603: NUM 10
603: SPECIAL_SYMBOL ;
603: ID i
603: SPECIAL_SYMBOL +
603: SPECIAL_SYMBOL +
603: SPECIAL_SYMBOL )
604: SPECIAL_SYMBOL {
605: RESERVED_WORD if
605: SPECIAL_SYMBOL (
605: ID i
605: SPECIAL_SYMBOL ==
605: NUM 5
605: SPECIAL_SYMBOL )
606: SPECIAL_SYMBOL {
607: ID continue
607: SPECIAL_SYMBOL ;
608: SPECIAL_SYMBOL }
609: RESERVED_WORD else
610: SPECIAL_SYMBOL {
611: ID printf
611: SPECIAL_SYMBOL ;
612: SPECIAL_SYMBOL }
613: SPECIAL_SYMBOL }
614: SPECIAL_SYMBOL }
617: RESERVED_WORD int
618: ID main
619: SPECIAL_SYMBOL (
619: SPECIAL_SYMBOL )
620: SPECIAL_SYMBOL {
621: ID func
621: SPECIAL_SYMBOL (
621: SPECIAL_SYMBOL )
621: SPECIAL_SYMBOL ;
622: RESERVED_WORD return
622: NUM 0
622: SPECIAL_SYMBOL ;
623: SPECIAL_SYMBOL }
644: RESERVED_WORD void
645: ID func
646: SPECIAL_SYMBOL (
646: SPECIAL_SYMBOL )
647: SPECIAL_SYMBOL {
648: RESERVED_WORD int
648: ID i
648: SPECIAL_SYMBOL ;
649: ID for
649: SPECIAL_SYMBOL (
649: ID i
649: SPECIAL_SYMBOL =
649: NUM 0
649: SPECIAL_SYMBOL ;
649: ID i
649: SPECIAL_SYMBOL < 
649: NUM 10
649: SPECIAL_SYMBOL ;
649: ID i
649: SPECIAL_SYMBOL +
649: SPECIAL_SYMBOL +
649: SPECIAL_SYMBOL )
650: SPECIAL_SYMBOL {
651: RESERVED_WORD if
651: SPECIAL_SYMBOL (
651: ID i
651: SPECIAL_SYMBOL ==
651: NUM 5
651: SPECIAL_SYMBOL )
652: SPECIAL_SYMBOL {
653: ID continue
653: SPECIAL_SYMBOL ;
654: SPECIAL_SYMBOL }
655: RESERVED_WORD else
656: SPECIAL_SYMBOL {
657: ID printf
657: SPECIAL_SYMBOL ;
658: SPECIAL_SYMBOL }
659: SPECIAL_SYMBOL }
660: SPECIAL_SYMBOL }
663: RESERVED_WORD int
664: ID main
665: SPECIAL_SYMBOL (
665: SPECIAL_SYMBOL )
666: SPECIAL_SYMBOL {
667: ID func
667: SPECIAL_SYMBOL (
667: SPECIAL_SYMBOL )
667: SPECIAL_SYMBOL ;
668: RESERVED_WORD return
668: NUM 0
668: SPECIAL_SYMBOL ;
669: SPECIAL_SYMBOL }
690: RESERVED_WORD void
691: ID func
692: SPECIAL_SYMBOL (
692: SPECIAL_SYMBOL )
693: SPECIAL_SYMBOL {
694: RESERVED_WORD int
694: ID i
694: SPECIAL_SYMBOL ;
695: ID for
695: SPECIAL_SYMBOL (
695: ID i
695: SPECIAL_SYMBOL =
695: NUM 0
695: SPECIAL_SYMBOL ;
695: ID i
695: SPECIAL_SYMBOL < 
695: NUM 10
695: SPECIAL_SYMBOL ;
695: ID i
695: SPECIAL_SYMBOL +
695: SPECIAL_SYMBOL +
695: SPECIAL_SYMBOL )
696: SPECIAL_SYMBOL {
697: RESERVED_WORD if
697: SPECIAL_SYMBOL (
697: ID i
697: SPECIAL_SYMBOL ==
697: NUM 5
697: SPECIAL_SYMBOL )
698: SPECIAL_SYMBOL {
699: ID continue
699: SPECIAL_SYMBOL ;
700: SPECIAL_SYMBOL }
701: RESERVED_WORD else
702: SPECIAL_SYMBOL {
703: ID printf
703: SPECIAL_SYMBOL ;
704: SPECIAL_SYMBOL }
705: SPECIAL_SYMBOL }
706: SPECIAL_SYMBOL }
709: RESERVED_WORD int
710: ID main
711: SPECIAL_SYMBOL (
711: SPECIAL_SYMBOL )
712: SPECIAL_SYMBOL {
713: ID func
713: SPECIAL_SYMBOL (
713: SPECIAL_SYMBOL )
713: SPECIAL_SYMBOL ;
714: RESERVED_WORD return
714: NUM 0
714: SPECIAL_SYMBOL ;
715: SPECIAL_SYMBOL }
736: RESERVED_WORD void
737: ID func
738: SPECIAL_SYMBOL (
738: SPECIAL_SYMBOL )
739: SPECIAL_SYMBOL {
740: RESERVED_WORD int
740: ID i
740: SPECIAL_SYMBOL ;
741: ID for
741: SPECIAL_SYMBOL (
741: ID i
741: SPECIAL_SYMBOL =
741: NUM 0
741: SPECIAL_SYMBOL ;
741: ID i
741: SPECIAL_SYMBOL < 
741: NUM 10
741: SPECIAL_SYMBOL ;
741: ID i
741: SPECIAL_SYMBOL +
741: SPECIAL_SYMBOL +
741: SPECIAL_SYMBOL )
742: SPECIAL_SYMBOL {
743: RESERVED_WORD if
743: SPECIAL_SYMBOL (
743: ID i
743: SPECIAL_SYMBOL ==
743: NUM 5
743: SPECIAL_SYMBOL )
744: SPECIAL_SYMBOL {
745: ID continue
745: SPECIAL_SYMBOL ;
746: SPECIAL_SYMBOL }
747: RESERVED_WORD else
748: SPECIAL_SYMBOL {
749: ID printf
749: SPECIAL_SYMBOL ;
750: SPECIAL_SYMBOL }
751: SPECIAL_SYMBOL }
752: SPECIAL_SYMBOL }
755: RESERVED_WORD int
756: ID main
757: SPECIAL_SYMBOL (
757: SPECIAL_SYMBOL )
758: SPECIAL_SYMBOL {
759: ID func
759: SPECIAL_SYMBOL (
759: SPECIAL_SYMBOL )
759: SPECIAL_SYMBOL ;
760: RESERVED_WORD return
760: NUM 0
760: SPECIAL_SYMBOL ;
761: SPECIAL_SYMBOL }
782: RESERVED_WORD void
783: ID func
784: SPECIAL_SYMBOL (
784: SPECIAL_SYMBOL )
785: SPECIAL_SYMBOL {
786: RESERVED_WORD int
786: ID i
786: SPECIAL_SYMBOL ;
787: ID for
787: SPECIAL_SYMBOL (
787: ID i
787: SPECIAL_SYMBOL =
787: NUM 0
787: SPECIAL_SYMBOL ;
787: ID i
787: SPECIAL_SYMBOL < 
787: NUM 10
787: SPECIAL_SYMBOL ;
787: ID i
787: SPECIAL_SYMBOL +
787: SPECIAL_SYMBOL +
787: SPECIAL_SYMBOL )
788: SPECIAL_SYMBOL {
789: RESERVED_WORD if
789: SPECIAL_SYMBOL (
789: ID i
789: SPECIAL_SYMBOL ==
789: NUM 5
789: SPECIAL_SYMBOL )
790: SPECIAL_SYMBOL {
791: ID continue
791: SPECIAL_SYMBOL ;
792: SPECIAL_SYMBOL }
793: RESERVED_WORD else
794: SPECIAL_SYMBOL {
795: ID printf
795: SPECIAL_SYMBOL ;
796: SPECIAL_SYMBOL }
797: SPECIAL_SYMBOL }
798: SPECIAL_SYMBOL }
801: RESERVED_WORD int
802: ID main
803: SPECIAL_SYMBOL (
803: SPECIAL_SYMBOL )
804: SPECIAL_SYMBOL {
805: ID func
805: SPECIAL_SYMBOL (
805: SPECIAL_SYMBOL )
805: SPECIAL_SYMBOL ;
806: RESERVED_WORD return
806: NUM 0
806: SPECIAL_SYMBOL ;
807: SPECIAL_SYMBOL }
828: RESERVED_WORD void
829: ID func
830: SPECIAL_SYMBOL (
830: SPECIAL_SYMBOL )
831: SPECIAL_SYMBOL {
832: RESERVED_WORD int
832: ID i
832: SPECIAL_SYMBOL ;
833: ID for
833: SPECIAL_SYMBOL (
833: ID i
833: SPECIAL_SYMBOL =
833: NUM 0
833: SPECIAL_SYMBOL ;
833: ID i
833: SPECIAL_SYMBOL < 
833: NUM 10
833: SPECIAL_SYMBOL ;
833: ID i
833: SPECIAL_SYMBOL +
833: SPECIAL_SYMBOL +
833: SPECIAL_SYMBOL )
834: SPECIAL_SYMBOL {
835: RESERVED_WORD if
835: SPECIAL_SYMBOL (
835: ID i
835: SPECIAL_SYMBOL ==
835: NUM 5
835: SPECIAL_SYMBOL )
836: SPECIAL_SYMBOL {
837: ID continue
837: SPECIAL_SYMBOL ;
838: SPECIAL_SYMBOL }
839: RESERVED_WORD else
840: SPECIAL_SYMBOL {
841: ID printf
841: SPECIAL_SYMBOL ;
842: SPECIAL_SYMBOL }
843: SPECIAL_SYMBOL }
844: SPECIAL_SYMBOL }
847: RESERVED_WORD int
848: ID main
849: SPECIAL_SYMBOL (
849: SPECIAL_SYMBOL )
850: SPECIAL_SYMBOL {
851: ID func
851: SPECIAL_SYMBOL (
851: SPECIAL_SYMBOL )
851: SPECIAL_SYMBOL ;
852: RESERVED_WORD return
852: NUM 0
852: SPECIAL_SYMBOL ;
853: SPECIAL_SYMBOL }
874: RESERVED_WORD void
875: ID func
876: SPECIAL_SYMBOL (
876: SPECIAL_SYMBOL )
877: SPECIAL_SYMBOL {
878: RESERVED_WORD int
878: ID i
878: SPECIAL_SYMBOL ;
879: ID for
879: SPECIAL_SYMBOL (
879: ID i
879: SPECIAL_SYMBOL =
879: NUM 0
879: SPECIAL_SYMBOL ;
879: ID i
879: SPECIAL_SYMBOL < 
879: NUM 10
879: SPECIAL_SYMBOL ;
879: ID i
879: SPECIAL_SYMBOL +
879: SPECIAL_SYMBOL +
879: SPECIAL_SYMBOL )
880: SPECIAL_SYMBOL {
881: RESERVED_WORD if
881: SPECIAL_SYMBOL (
881: ID i
881: SPECIAL_SYMBOL ==
881: NUM 5
881: SPECIAL_SYMBOL )
882: SPECIAL_SYMBOL {
883: ID continue
883: SPECIAL_SYMBOL ;
884: SPECIAL_SYMBOL }
885: RESERVED_WORD else
886: SPECIAL_SYMBOL {
887: ID printf
887: SPECIAL_SYMBOL ;
888: SPECIAL_SYMBOL }
889: SPECIAL_SYMBOL }
890: SPECIAL_SYMBOL }
893: RESERVED_WORD int
894: ID main
895: SPECIAL_SYMBOL (
895: SPECIAL_SYMBOL )
896: SPECIAL_SYMBOL {
897: ID func
897: SPECIAL_SYMBOL (
897: SPECIAL_SYMBOL )
897: SPECIAL_SYMBOL ;
898: RESERVED_WORD return
898: NUM 0
898: SPECIAL_SYMBOL ;
899: SPECIAL_SYMBOL }
920: RESERVED_WORD void
921: ID func
922: SPECIAL_SYMBOL (
922: SPECIAL_SYMBOL )
923: SPECIAL_SYMBOL {
924: RESERVED_WORD int
924: ID i
924: SPECIAL_SYMBOL ;
925: ID for
925: SPECIAL_SYMBOL (
925: ID i
925: SPECIAL_SYMBOL =
925: NUM 0
925: SPECIAL_SYMBOL ;
925: ID i
925: SPECIAL_SYMBOL < 
925: NUM 10
925: SPECIAL_SYMBOL ;
925: ID i
925: SPECIAL_SYMBOL +
925: SPECIAL_SYMBOL +
925: SPECIAL_SYMBOL )
926: SPECIAL_SYMBOL {
927: RESERVED_WORD if
927: SPECIAL_SYMBOL (
927: ID i
927: SPECIAL_SYMBOL ==
927: NUM 5
927: SPECIAL_SYMBOL )
928: SPECIAL_SYMBOL {
929: ID continue
929: SPECIAL_SYMBOL ;
930: SPECIAL_SYMBOL }
931: RESERVED_WORD else
932: SPECIAL_SYMBOL {
933: ID printf
933: SPECIAL_SYMBOL ;
934: SPECIAL_SYMBOL }
935: SPECIAL_SYMBOL }
936: SPECIAL_SYMBOL }
939: RESERVED_WORD int
940: ID main
941: SPECIAL_SYMBOL (
941: SPECIAL_SYMBOL )
942: SPECIAL_SYMBOL {
943: ID func
943: SPECIAL_SYMBOL (
943: SPECIAL_SYMBOL )
943: SPECIAL_SYMBOL ;
944: RESERVED_WORD return
944: NUM 0
944: SPECIAL_SYMBOL ;
945: SPECIAL_SYMBOL }
966: RESERVED_WORD void
967: ID func
968: SPECIAL_SYMBOL (
968: SPECIAL_SYMBOL )
969: SPECIAL_SYMBOL {
970: RESERVED_WORD int
970: ID i
970: SPECIAL_SYMBOL ;
971: ID for
971: SPECIAL_SYMBOL (
971: ID i
971: SPECIAL_SYMBOL =
971: NUM 0
971: SPECIAL_SYMBOL ;
971: ID i
971: SPECIAL_SYMBOL < 
971: NUM 10
971: SPECIAL_SYMBOL ;
971: ID i
971: SPECIAL_SYMBOL +
971: SPECIAL_SYMBOL +
971: SPECIAL_SYMBOL )
972: SPECIAL_SYMBOL {
973: RESERVED_WORD if
973: SPECIAL_SYMBOL (
973: ID i
973: SPECIAL_SYMBOL ==
973: NUM 5
973: SPECIAL_SYMBOL )
974: SPECIAL_SYMBOL {
975: ID continue
975: SPECIAL_SYMBOL ;
976: SPECIAL_SYMBOL }
977: RESERVED_WORD else
978: SPECIAL_SYMBOL {
979: ID printf
979: SPECIAL_SYMBOL ;
980: SPECIAL_SYMBOL }
981: SPECIAL_SYMBOL }
982: SPECIAL_SYMBOL }
985: RESERVED_WORD int
986: ID main
987: SPECIAL_SYMBOL (
987: SPECIAL_SYMBOL )
988: SPECIAL_SYMBOL {
989: ID func
989: SPECIAL_SYMBOL (
989: SPECIAL_SYMBOL )
989: SPECIAL_SYMBOL ;
990: RESERVED_WORD return
990: NUM 0
990: SPECIAL_SYMBOL ;
991: SPECIAL_SYMBOL }
1012: RESERVED_WORD void
1013: ID func
1014: SPECIAL_SYMBOL (
1014: SPECIAL_SYMBOL )
1015: SPECIAL_SYMBOL {
1016: RESERVED_WORD int
1016: ID i
1016: SPECIAL_SYMBOL ;
1017: ID for
1017: SPECIAL_SYMBOL (
1017: ID i
1017: SPECIAL_SYMBOL =
1017: NUM 0
1017: SPECIAL_SYMBOL ;
1017: ID i
1017: SPECIAL_SYMBOL < 
1017: NUM 10
1017: SPECIAL_SYMBOL ;
1017: ID i
1017: SPECIAL_SYMBOL +
1017: SPECIAL_SYMBOL +
1017: SPECIAL_SYMBOL )
1018: SPECIAL_SYMBOL {
1019: RESERVED_WORD if
1019: SPECIAL_SYMBOL (
1019: ID i
1019: SPECIAL_SYMBOL ==
1019: NUM 5
1019: SPECIAL_SYMBOL )
1020: SPECIAL_SYMBOL {
1021: ID continue
1021: SPECIAL_SYMBOL ;
1022: SPECIAL_SYMBOL }
1023: RESERVED_WORD else
1024: SPECIAL_SYMBOL {
1025: ID printf
1025: SPECIAL_SYMBOL ;
1026: SPECIAL_SYMBOL }
1027: SPECIAL_SYMBOL }
1028: SPECIAL_SYMBOL }
1031: RESERVED_WORD int
1032: ID main
1033: SPECIAL_SYMBOL (
1033: SPECIAL_SYMBOL )
1034: SPECIAL_SYMBOL {
1035: ID func
1035: SPECIAL_SYMBOL (
1035: SPECIAL_SYMBOL )
1035: SPECIAL_SYMBOL ;
1036: RESERVED_WORD return
1036: NUM 0
1036: SPECIAL_SYMBOL ;
1037: SPECIAL_SYMBOL }
